{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.\n",
      "  \"This module will be removed in 0.20.\", DeprecationWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model\n",
    "from scipy.stats import t,laplace,norm,multivariate_normal\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from math import sqrt\n",
    "from sklearn import cross_validation\n",
    "from sklearn.datasets import load_boston\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LinearRegression,Ridge,Lasso\n",
    "\n",
    "from sklearn.preprocessing import scale\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Ordinary Linear Regression\n",
    "We use np.polyfit with order = 1 to fit a line to the 1-D data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A helper method for pretty-printing linear models\n",
    "def pretty_print_linear(coefs, intercept, names = None, sort = False):\n",
    "    if names == None:\n",
    "        names = [\"X%s\" % x for x in range(1,1+len(coefs))]\n",
    "    lst = zip(coefs, names)\n",
    "    if sort:\n",
    "        lst = sorted(lst,  key = lambda x:-np.abs(x[0]))\n",
    "    return \"%6.3f\"%intercept+\" + \" +\" + \".join(\"%6.3f * %s\" % (coef, name)\n",
    "                                   for coef, name in lst)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1c1ab2a390>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#generate some data\n",
    "x = np.arange(20)\n",
    "w = np.array([-3.8,0.11])\n",
    "y = w[0] + w[1]*x\n",
    "sigma2 = 0.1\n",
    "y = y + np.random.normal(0,sqrt(sigma2),x.shape[0])\n",
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.940 +  0.122 * X1\n"
     ]
    }
   ],
   "source": [
    "# fit model - note that LinearRegression's fit function adds the intercept by default\n",
    "x = np.transpose(np.reshape(x,[1,len(x)]))\n",
    "y = np.transpose(np.reshape(y,[1,len(y)]))\n",
    "lr = LinearRegression()\n",
    "lr.fit(x,y)\n",
    "print(pretty_print_linear(lr.coef_,lr.intercept_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x103476898>]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xtest = np.transpose(np.reshape(range(25),[1,len(range(25))]))\n",
    "ytest = lr.predict(xtest)\n",
    "plt.scatter(x,y)\n",
    "plt.plot(xtest,ytest, color=\"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Impact of outliers\n",
    "OLE is susceptible to outliers because of the square term in the loss function. For Bayesian regression, the issue arises because of the square term in the pdf of the Gaussian distribution. See below for alternate distributions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1c1ad63400>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# adding outliers\n",
    "y[19] = -3*y[0]\n",
    "plt.scatter(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-4.992 +  0.298 * X1\n"
     ]
    }
   ],
   "source": [
    "# fit model - note that LinearRegression's fit function adds the intercept by default\n",
    "x = np.transpose(np.reshape(x,[1,len(x)]))\n",
    "y = np.transpose(np.reshape(y,[1,len(y)]))\n",
    "lr = LinearRegression()\n",
    "lr.fit(x,y)\n",
    "print(pretty_print_linear(lr.coef_,lr.intercept_))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1c1adcd1d0>]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xtest = np.transpose(np.reshape(range(25),[1,len(range(25))]))\n",
    "ytest = lr.predict(xtest)\n",
    "plt.scatter(x,y)\n",
    "plt.plot(xtest, ytest, color=\"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using robust regression\n",
    "The statsmodels package has a robust linear regression model function (rlm) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.980 +  0.129 * X1\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "x1 = np.transpose(np.vstack([np.ones(x.shape[0]),x.flatten()]))\n",
    "# Fit model and print summary\n",
    "rlm_model = sm.RLM(y, x1, M=sm.robust.norms.HuberT())\n",
    "w = rlm_model.fit()\n",
    "w =  w.params\n",
    "print(pretty_print_linear(w[1:],w[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x1c1aeb6908>]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xtest = np.transpose(np.reshape(range(25),[1,len(range(25))]))\n",
    "ytest = w[0] + w[1]*xtest\n",
    "plt.scatter(x,y)\n",
    "plt.plot(xtest, ytest, color=\"red\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Handling outliers using other distributions\n",
    "Below are some alternate distributions with less fat tail than Gaussian."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Laplace distribution\n",
    "The distribution is defined using two parameters: $\\mu$ and $b$. You can compute the <i>density</i> using the <b>probability density function</b>:\n",
    "$$p(x) = \\frac{1}{2b}\\exp\\left(-\\frac{\\vert x - \\mu\\vert}{b}\\right)$$\n",
    "\n",
    "#### Student-t distribution\n",
    "The distribution is defined using one parameter: $\\nu$ or degrees of freedom. You can compute the <i>density</i> using the <b>probability density function</b>:\n",
    "$$p(x) = \\frac{\\Gamma\\left(\\frac{\\nu + 1}{2}\\right)}{\\sqrt{\\nu\\pi}{\\Gamma\\left(\\frac{\\nu}{2}\\right)}}\\left(1 + \\frac{x^2}{\\nu}\\right)^{-\\frac{\\nu+1}{2}}$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c18671ef0>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# comparing student-t, norm, laplace\n",
    "s = np.linspace(-10,10, 100)\n",
    "df = 2.74335149908\n",
    "plt.plot(s, laplace.pdf(s),'r-', lw=2, alpha=0.6, label='Laplace pdf')#assuming b = 1 and \\mu = 0\n",
    "plt.plot(s, t.pdf(s,df),'b-', lw=2, alpha=0.6, label='Student-t pdf')#nu = df\n",
    "plt.plot(s, norm.pdf(s,0,2),'k-', lw=2, alpha=0.6, label='Gaussian pdf')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Demonstrating Overfitting with Linear Regression\n",
    "Also how to control the overfitting using Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1c1b08c7b8>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rng = np.random.RandomState(0)\n",
    "# Generate sample data\n",
    "np.random.seed(0)\n",
    "n_samples = 30\n",
    "true_fun = lambda X: np.cos(1.5 * np.pi * X)\n",
    "X = np.sort(np.random.rand(n_samples))\n",
    "y = true_fun(X) + np.random.randn(n_samples) * 0.2\n",
    "X = X[:,np.newaxis]\n",
    "# Learn linear regression model\n",
    "lrmodel = LinearRegression()\n",
    "lrmodel.fit(X,y)\n",
    "# Do polynomial basis expansion\n",
    "polynomial_features = PolynomialFeatures(degree=10,include_bias=False)\n",
    "# fit linear model on expanded features\n",
    "lrmodel1 = LinearRegression()\n",
    "pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
    "                     (\"linear_regression\", lrmodel1)])\n",
    "pipeline.fit(X,y)\n",
    "# fit ridge regression model on expanded features\n",
    "rrmodel = Ridge(alpha=0.1)\n",
    "pipeline1 = Pipeline([(\"polynomial_features\", polynomial_features),\n",
    "                     (\"ridge_regression\", rrmodel)])\n",
    "pipeline1.fit(X,y)\n",
    "\n",
    "# plot the fitted lines\n",
    "X_all = np.linspace(0, 1, 100)\n",
    "fig = plt.figure(figsize=[12,8])\n",
    "plt.subplot(2,2,1)\n",
    "plt.plot(X_all, lrmodel.predict(X_all[:, np.newaxis]),color='k',label='')\n",
    "plt.scatter(X,y, c='k', label='data')\n",
    "plt.legend()\n",
    "plt.subplot(2,2,2)\n",
    "plt.plot(X_all, pipeline.predict(X_all[:, np.newaxis]),color='r')\n",
    "plt.scatter(X,y, c='k', label='data')\n",
    "plt.legend()\n",
    "plt.subplot(2,2,3)\n",
    "plt.plot(X_all, pipeline1.predict(X_all[:, np.newaxis]),color='b')\n",
    "plt.scatter(X,y, c='k', label='data')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Ridge Regression to Control Impact of correlated variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " 0.033 +  0.984 * X1 +  1.995 * X2 + -0.041 * X3\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(0)\n",
    "size = 5000\n",
    " \n",
    "#A dataset with 3 features\n",
    "X = np.random.normal(0, 1, (size, 3))\n",
    "#Y = X0 + 2*X1 + noise\n",
    "Y = X[:,0] + 2*X[:,1] + np.random.normal(0, 2, size)\n",
    "lr = LinearRegression()\n",
    "lr.fit(X, Y)\n",
    "print(pretty_print_linear(lr.coef_,lr.intercept_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear model: -0.172 + -0.114 * X1 +  1.210 * X2 +  1.763 * X3\n",
      "Linear model: -0.025 +  0.845 * X1 +  1.127 * X2 +  1.057 * X3\n",
      "Linear model:  0.244 + -0.199 * X1 +  1.181 * X2 +  2.023 * X3\n",
      "Linear model: -0.139 +  1.363 * X1 +  1.599 * X2 +  0.003 * X3\n",
      "Linear model:  0.098 +  1.013 * X1 +  1.535 * X2 +  0.406 * X3\n",
      "Linear model:  0.144 +  0.717 * X1 +  0.764 * X2 +  1.584 * X3\n",
      "Linear model:  0.025 +  1.330 * X1 +  1.767 * X2 + -0.149 * X3\n",
      "Linear model: -0.120 +  1.854 * X1 +  1.535 * X2 + -0.539 * X3\n",
      "Linear model:  0.045 + -0.682 * X1 +  0.786 * X2 +  2.921 * X3\n",
      "Linear model:  0.036 +  1.836 * X1 + -0.855 * X2 +  1.795 * X3\n"
     ]
    }
   ],
   "source": [
    "# adding correlated variables\n",
    "size = 100\n",
    "X_seed = np.random.normal(0, 1, size)\n",
    "for i in range(10):\n",
    "    np.random.seed(seed=i)\n",
    "    X1 = X_seed + np.random.normal(0, .1, size)\n",
    "    X2 = X_seed + np.random.normal(0, .1, size)\n",
    "    X3 = X_seed + np.random.normal(0, .1, size)\n",
    "    Y = X1 + X2 + X3 + np.random.normal(0, 1, size)\n",
    "    X = np.array([X1, X2, X3]).T\n",
    " \n",
    "    lr = LinearRegression()\n",
    "    lr.fit(X,Y)\n",
    "    print(\"Linear model:\", pretty_print_linear(lr.coef_,lr.intercept_))\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ridge model: -0.180 +  0.555 * X1 +  0.667 * X2 +  0.599 * X3\n",
      "Ridge model: -0.008 +  0.636 * X1 +  0.656 * X2 +  0.582 * X3\n",
      "Ridge model:  0.260 +  0.540 * X1 +  0.641 * X2 +  0.635 * X3\n",
      "Ridge model: -0.194 +  0.719 * X1 +  0.728 * X2 +  0.506 * X3\n",
      "Ridge model:  0.079 +  0.678 * X1 +  0.738 * X2 +  0.501 * X3\n",
      "Ridge model:  0.154 +  0.662 * X1 +  0.657 * X2 +  0.649 * X3\n",
      "Ridge model: -0.012 +  0.752 * X1 +  0.757 * X2 +  0.514 * X3\n",
      "Ridge model: -0.130 +  0.743 * X1 +  0.643 * X2 +  0.408 * X3\n",
      "Ridge model:  0.032 +  0.521 * X1 +  0.691 * X2 +  0.784 * X3\n",
      "Ridge model:  0.004 +  0.804 * X1 +  0.525 * X2 +  0.646 * X3\n"
     ]
    }
   ],
   "source": [
    "# handling correlated variables through Ridge Regression\n",
    "size = 100\n",
    "X_seed = np.random.normal(0, 1, size)\n",
    "for i in range(10):\n",
    "    np.random.seed(seed=i)\n",
    "    X1 = X_seed + np.random.normal(0, .1, size)\n",
    "    X2 = X_seed + np.random.normal(0, .1, size)\n",
    "    X3 = X_seed + np.random.normal(0, .1, size)\n",
    "    Y = X1 + X2 + np.random.normal(0, 1, size)\n",
    "    X = np.array([X1, X2, X3]).T\n",
    " \n",
    "    ridge = Ridge(alpha=10)\n",
    "    ridge.fit(X,Y)\n",
    "    print(\"Ridge model:\", pretty_print_linear(ridge.coef_,ridge.intercept_))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Using LASSO to control overfitting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(30, 1)\n",
      "(30,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1a09af6da0>"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# fit LASSO on expanded features\n",
    "print(X.shape)\n",
    "print(y.shape)\n",
    "llmodel = Lasso(alpha=0.01)\n",
    "pipeline2 = Pipeline([(\"polynomial_features\", polynomial_features),\n",
    "                     (\"lasso_regression\", llmodel)])\n",
    "pipeline2.fit(X,y)\n",
    "# plot the fitted lines\n",
    "X_all = np.linspace(0, 1, 100)\n",
    "plt.plot(X_all, pipeline2.predict(X_all[:, np.newaxis]),label='Lasso Fit')\n",
    "plt.scatter(X,y, c='k', label='data')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Demonstrating the role of Lasso in inducing sparsity\n",
    "We will use the Boston housing data set to study this phenomenon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "boston = load_boston()\n",
    "scaler = StandardScaler()\n",
    "X = scaler.fit_transform(boston[\"data\"])\n",
    "Y = boston[\"target\"]\n",
    "names = boston[\"feature_names\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross validation error: 34.7475\n",
      "Linear regression model:  22.533 + -3.747 * X13 + -3.102 * X8 +  2.672 * X6 +  2.652 * X9 + -2.069 * X10 + -2.061 * X11 + -2.057 * X5 +  1.079 * X2 + -0.920 * X1 +  0.857 * X12 +  0.683 * X4 +  0.141 * X3 +  0.020 * X7\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Users/mgao8/anaconda3/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    }
   ],
   "source": [
    "# fit linear regression\n",
    "lrmodel = Ridge(alpha=0.1)\n",
    "lrmodel.fit(X, Y)\n",
    "scores = -np.mean(cross_validation.cross_val_score(lrmodel,\n",
    "    X, Y, scoring=\"mean_squared_error\", cv=10))\n",
    "print(\"Cross validation error: %.4f\"%scores)\n",
    "print(\"Linear regression model: \", pretty_print_linear(lrmodel.coef_, lrmodel.intercept_, sort = True))\n",
    "#print(\"Linear regression model: \", pretty_print_linear(lrmodel.coef_, lrmodel.intercept_, names, sort = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross validation error: 34.6789\n",
      "Lasso model:  22.533 + -3.707 * X13 +  2.992 * X6 + -1.757 * X11 + -1.081 * X8 + -0.700 * X5 +  0.631 * X12 +  0.540 * X4 + -0.236 * X1 +  0.081 * X2 + -0.000 * X3 + -0.000 * X7 +  0.000 * X9 + -0.000 * X10\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n",
      "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages/sklearn/metrics/scorer.py:100: DeprecationWarning: Scoring method mean_squared_error was renamed to neg_mean_squared_error in version 0.18 and will be removed in 0.20.\n",
      "  sample_weight=sample_weight)\n"
     ]
    }
   ],
   "source": [
    "# fit Lasso\n",
    "lasso = Lasso(alpha=0.3)\n",
    "lasso.fit(X, Y)\n",
    "scores = -np.mean(cross_validation.cross_val_score(lasso,\n",
    "    X, Y, scoring=\"mean_squared_error\", cv=10))\n",
    "print(\"Cross validation error: %.4f\"%scores)\n",
    "print(\"Lasso model: \", pretty_print_linear(lasso.coef_, lasso.intercept_, sort = True))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x10ddbb550>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10db86e10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# comparing the two for sparsity\n",
    "fig = plt.figure(figsize=[12,6])\n",
    "plt.bar(range(1,len(lrmodel.coef_)+1),lrmodel.coef_,color='red',width=0.33,alpha=0.6)\n",
    "plt.bar(np.arange(1.33,len(lrmodel.coef_)+1),lasso.coef_,color='green',width=0.33,alpha=0.6)\n",
    "plt.legend(['Linear Regression', 'Lasso'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-5, 5)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10dea88d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "rng = np.random.RandomState(0)\n",
    "# Generate sample data\n",
    "np.random.seed(0)\n",
    "n_samples = 30\n",
    "true_fun = lambda X: np.cos(1.5 * np.pi * X)\n",
    "X = np.sort(np.random.rand(n_samples))\n",
    "y = true_fun(X) + np.random.randn(n_samples) * 0.2\n",
    "X = X[:,np.newaxis]\n",
    "# Learn linear regression model\n",
    "lrmodel = LinearRegression()\n",
    "lrmodel.fit(X,y)\n",
    "# Do polynomial basis expansion\n",
    "polynomial_features = PolynomialFeatures(degree=2,include_bias=False)\n",
    "# fit linear model on expanded features\n",
    "lrmodel1 = LinearRegression()\n",
    "pipeline = Pipeline([(\"polynomial_features\", polynomial_features),\n",
    "                     (\"linear_regression\", lrmodel1)])\n",
    "pipeline.fit(X,y)\n",
    "X_all = np.linspace(0, 1, 100)\n",
    "plt.plot(X_all, pipeline.predict(X_all[:, np.newaxis]),color='k',label='')\n",
    "plt.scatter(X,y, c='k', label='data')\n",
    "plt.ylim([-5,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
